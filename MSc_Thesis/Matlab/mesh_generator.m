function [model] = mesh_generator(model)

%% 1D Integral
model.integral_1D(3) = struct('point', 0, 'weight', 0); % allocate

% 2 point
model.integral_1D(1).point = [
     0.21132486540518713;
     0.7886751345948129];

model.integral_1D(1).weight = [
     0.5;
     0.5];

% 4 point
model.integral_1D(2).point = [
     0.06943184420297377;
     0.33000947820757187;
     0.6699905217924281;
     0.9305681557970262];

model.integral_1D(2).weight = [
     0.1739274225687273;
     0.3260725774312727;
     0.3260725774312727;
     0.1739274225687273];

% 6 point
model.integral_1D(3).point = [
     0.033765242898423975;
     0.16939530676686776;
     0.3806904069584015;
     0.6193095930415985;
     0.8306046932331322;
     0.966234757101576];

model.integral_1D(3).weight = [
     0.08566224618958529;
     0.18038078652406922;
     0.2339569672863454;
     0.2339569672863454;
     0.18038078652406922;
     0.08566224618958529];

%% 2D Integral
model.integral_2D(2) = struct('point', 0, 'weight', 0); % allocate

% 14 point
model.integral_2D(1).point = transpose([
    6.943184420297371*10^-2, 4.365302387072518*10^-2;
    6.943184420297371*10^-2, 0.214742881469342;
    6.943184420297371*10^-2, 0.465284077898513 ;
    6.943184420297371*10^-2, 0.715825274327684 ;
    6.943184420297371*10^-2, 0.886915131926301 ;
    0.330009478207572,       4.651867752656094*10^-2; 
    0.330009478207572,       0.221103222500738 ;
    0.330009478207572,       0.448887299291690 ;
    0.330009478207572,       0.623471844265867 ;
    0.669990521792428,       3.719261778493340*10^-2 ;
    0.669990521792428,       0.165004739103786; 
    0.669990521792428,       0.292816860422638; 
    0.930568155797026,       1.467267513102734*10^-2;
    0.930568155797026,       5.475916907194637*10^-2]);

model.integral_2D(1).weight = [
    1.917346464706755*10^-2;
    3.873334126144628*10^-2;
    4.603770904527855*10^-2;
    3.873334126144628*10^-2;
    1.917346464706755*10^-2;
    3.799714764789616*10^-2;
    7.123562049953998*10^-2;
    7.123562049953998*10^-2;
    3.799714764789616*10^-2;
    2.989084475992800*10^-2;
    4.782535161588505*10^-2;
    2.989084475992800*10^-2;
    6.038050853208200*10^-3;
    6.038050853208200*10^-3];

% 44 point
model.integral_2D(2).point = transpose([
    0.01985507175123191, 0.0156037898816279;
    0.01985507175123191, 0.08035663927218221;
    0.01985507175123191, 0.189476014677302;
    0.01985507175123191, 0.331164789916112;
    0.01985507175123191, 0.490072464124384;
    0.01985507175123191, 0.648980138332656;
    0.01985507175123191, 0.790668913571466;
    0.01985507175123191, 0.899788288976586;
    0.01985507175123191, 0.96454113836714;
    0.101666761293187, 0.01783647091104033;
    0.101666761293187, 0.09133063094134082;
    0.101666761293187, 0.21311500343064;
    0.101666761293187, 0.366773901111335;
    0.101666761293187, 0.531559337595478;
    0.101666761293187, 0.685218235276173;
    0.101666761293187, 0.807002607765473;
    0.101666761293187, 0.880496767795773;
    0.237233795041836, 0.01940938228235618;
    0.237233795041836, 0.09857563833019302;
    0.237233795041836, 0.226600619520678;
    0.237233795041836, 0.381383102479082;
    0.237233795041836, 0.536165585437487;
    0.237233795041836, 0.664190566627971;
    0.237233795041836, 0.743356822675808;
    0.408282678752175, 0.01997947907913758;
    0.408282678752175, 0.100234137152044;
    0.408282678752175, 0.22526110783017;
    0.408282678752175, 0.366456213417655;
    0.408282678752175, 0.49148318409578;
    0.408282678752175, 0.571737842168687;
    0.591717321247825, 0.01915257191055202;
    0.591717321247825, 0.09421749319819558;
    0.591717321247825, 0.204141339376088;
    0.591717321247825, 0.314065185553979;
    0.591717321247825, 0.389130106841623;
    0.762766204958164, 0.01647157989702492;
    0.762766204958164, 0.07828940091495819;
    0.762766204958164, 0.158944394126877;
    0.762766204958164, 0.220762215144811;
    0.898333238706813, 0.01145801331145764;
    0.898333238706813, 0.05083338064659329;
    0.898333238706813, 0.09020874798172894;
    0.980144928248768, 0.004195870365439417;
    0.980144928248768, 0.0156592013857925]);

model.integral_2D(2).weight = [
    0.002015983497663207;
    0.004480916044841641;
    0.006464359484621604;
    0.007747662769908149;
    0.008191474625434276;
    0.007747662769908149;
    0.006464359484621604;
    0.004480916044841641;
    0.002015983497663207;
    0.00505566374507017;
    0.01110639128725685;
    0.01566747257514398;
    0.01811354111938598;
    0.01811354111938598;
    0.01566747257514398;
    0.01110639128725685;
    0.00505566374507017;
    0.007745946956361961;
    0.01673231410555364;
    0.02284153446586376;
    0.02500282281756943;
    0.02284153446586376;
    0.01673231410555364;
    0.007745946956361961;
    0.009191827856850986;
    0.01935542449754594;
    0.02510431683577024;
    0.02510431683577024;
    0.01935542449754594;
    0.009191827856850986;
    0.00877088559745393;
    0.01771853503082167;
    0.02105991205229386;
    0.01771853503082167;
    0.00877088559745393;
    0.006471997505236908;
    0.01213345702759751;
    0.01213345702759751;
    0.006471997505236908;
    0.003140105492486528;
    0.005024168787978471;
    0.003140105492486528;
    0.0005024749628293684;
    0.0005024749628293684];

%% Time Grids

if abs(model.T_eps)<eps
    model.t = linspace(model.t_start, model.t_end, model.N_time + 1);
    % model.tau(1) = (model.t_end - model.t_start) / model.N_time;
else
    sigma = 2*model.T_eps*log(model.N_time);
    pt1 = linspace(model.t_start, model.t_start + sigma, model.N_time/4 + 1);
    pt2 = linspace(model.t_start + sigma, model.t_end - sigma, model.N_time/2 + 1);
    pt3 = linspace(model.t_end - sigma, model.t_end, model.N_time/4 + 1);
    model.t = [pt1(1:end-1), pt2(1:end-1), pt3];
end
model.tau = diff(model.t);

%% Space Grids
disp("mesh generator : space partition");
tic;

x = linspace(model.x_start, model.x_end, model.M_beta + 1);
y = linspace(model.y_start, model.y_end, model.M_gamma + 1);

model.h_x = (model.x_end - model.x_start) / model.M_beta;
model.h_y = (model.y_end - model.y_start) / model.M_gamma;

toc;

%% Nodes
disp("mesh generator : inner points");
tic;

model.K_h = (model.M_beta - 1)*(model.M_gamma - 1);

model.node = [
    kron(ones(1, model.M_gamma - 1), x(2:end-1)); 
    kron(y(2:end-1), ones(1, model.M_beta - 1))];

toc;

%% Element
disp("mesh generator : element steps");
tic;

model.T_h = 6;
model.element(6) = struct('p1', 0, 'p2', 0, 'p3', 0); % allocate

% t
model.element(1).p1 = [-model.h_x; -model.h_y];
model.element(1).p2 = [0; -model.h_y];
model.element(1).p3 = [0; 0];

model.element(2).p1 = [0; -model.h_y];
model.element(2).p2 = [model.h_x; 0];
model.element(2).p3 = [0; 0];

% 1-s-t
model.element(3).p1 = [0; 0];
model.element(3).p2 = [model.h_x; 0];
model.element(3).p3 = [model.h_x; model.h_y];

model.element(4).p1 = [0; 0];
model.element(4).p2 = [model.h_x; model.h_y];
model.element(4).p3 = [0; model.h_y];

% s
model.element(5).p1 = [-model.h_x; 0];
model.element(5).p2 = [0; 0];
model.element(5).p3 = [0; model.h_y];

model.element(6).p1 = [-model.h_x; -model.h_y];
model.element(6).p2 = [0; 0];
model.element(6).p3 = [-model.h_x; 0];

toc;

%% Bound
disp("mesh generator : bound points");
tic;

full_K_h = (model.M_beta+1)*(model.M_gamma+1);
bound_index = [1; model.M_beta + 1] + ((model.M_beta+1):(model.M_beta+1):(full_K_h - model.M_beta - 2));
bound_index = [1:(model.M_beta+1), transpose(bound_index(:)), (full_K_h - model.M_beta):full_K_h];
model.bound_point = zeros(2, length(bound_index));

node = [kron(ones(1, model.M_gamma + 1), x); kron(y, ones(1, model.M_beta + 1))];
model.bound_point = node(:, bound_index);

toc;